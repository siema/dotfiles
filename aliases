### aliases

# some colors
if ls --color &>/dev/null; then 
    alias ls='ls --color'
else
    alias ls='ls -G'
fi

alias dir='dir --color'
alias vdir='vdir --color'
alias grep='grep --color'
alias fgrep='fgrep --color'
alias egrep='egrep --color'

# make it human readable
alias ll='ls -lh'
alias df='df -h'
alias du='du -h'

# misc aliases
alias xclip='xclip -selection clipboard'
alias cdmount='udisksctl mount -b /dev/sr0'
alias pidcat='pidcat --always-display-tags'
alias svnclean='svn st | grep ^! | awk "{print \\" --force \\"$2}" | xargs svn rm'
alias adbren='adbren --strict --format "%anime_name_romaji%_%episode%%version%[%group_short%](%crc32%).%filetype%"'
alias ps4wake='ps4-wake -jBW $PS4_CRED'

if command -v systemctl &>/dev/null; then
    alias poweroff='systemctl poweroff'
    alias restart='systemctl restart'
    alias suspend='systemctl suspend'
    alias hibernate='systemctl hibernate'
fi

### functions

# ssh with tmux
ssht(){
    ssh $1 -t 'LANG=en_US.UTF-8 tmux a || LANG=en_US.UTF-8 tmux'
}

# copy svn properties from one file to another
svnpcopy(){
    SRC=$1
    [ -e "$SRC" ] || exit

    shift
    for PROP in $(svn pl "$SRC" | tail -n +2); do
        VALUE=$(svn pg $PROP "$SRC")
        for DST; do
            [ -e "$DST" ] && svn ps $PROP "$VALUE" "$DST"
        done
    done
}

# remove all Android Studio and gradle files
fuckidea(){
    DIR=$(pwd)

    if [ $# -eq 1 ]; then
        DIR=$1
    fi

    find $DIR \( \
        -name ".externalNativeBuild" \
        -or -name "build" \
        -or -name "*.iml" \
        -or -name ".idea" \
        -or -name ".gradle" \
        \) -prune -exec echo {} \; -exec rm -rf {} \;
}

# wait for the process to come up and then logcat for it
logcat(){
    bundle="$1"
    shift
    while :; do 
        pid=$(adb shell pidof "$bundle")
        if [ -n "$pid" ]; then
            adb logcat --pid="$pid" "$@"
            break
        fi
    done
}

# mount necessary filesystems and chroot
mntchroot(){
    if [ $EUID -ne 0 ]; then
        echo "This command needs to be run as root"
        return
    fi

    dir="$1"
    if [ ! -e "$dir" ]; then
        echo "Provided directory does not exist"
        return
    fi

    mount -t proc none "$dir/proc"
	mount --rbind /sys "$dir/sys"
	mount --make-rslave "$dir/sys"
	mount --rbind /dev "$dir/dev"
	mount --make-rslave "$dir/dev"
    cp /etc/resolv.conf "$dir/etc/"
	chroot "$dir" /bin/bash
}

# vim: ft=sh

